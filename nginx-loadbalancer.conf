# ============================================================================
# NGINX Load Balancer Configuration for SGT-LMS (10,000+ Users)
# ============================================================================
# 
# This configuration handles:
# - SSL termination
# - WebSocket sticky sessions
# - Load balancing across 4-8 backend servers
# - Health checks
# - Rate limiting
# - Security headers
# 
# Installation:
# sudo cp nginx-loadbalancer.conf /etc/nginx/sites-available/sgt-lms
# sudo ln -s /etc/nginx/sites-available/sgt-lms /etc/nginx/sites-enabled/
# sudo nginx -t
# sudo systemctl reload nginx
# ============================================================================

# Upstream backend servers (Application Servers)
upstream backend_servers {
    # Sticky sessions (ip_hash) ensures WebSocket connections stay on same server
    ip_hash;
    
    # Health check settings
    # least_conn; # Use this instead of ip_hash for better load distribution (requires nginx plus)
    
    # Application servers (add more as needed for 10k+ users)
    server 192.168.1.101:5000 max_fails=3 fail_timeout=30s weight=1;
    server 192.168.1.102:5000 max_fails=3 fail_timeout=30s weight=1;
    server 192.168.1.103:5000 max_fails=3 fail_timeout=30s weight=1;
    server 192.168.1.104:5000 max_fails=3 fail_timeout=30s weight=1;
    # Add more servers for 10k+ users:
    # server 192.168.1.105:5000 max_fails=3 fail_timeout=30s weight=1;
    # server 192.168.1.106:5000 max_fails=3 fail_timeout=30s weight=1;
    # server 192.168.1.107:5000 max_fails=3 fail_timeout=30s weight=1;
    # server 192.168.1.108:5000 max_fails=3 fail_timeout=30s weight=1;
    
    # Keepalive connections
    keepalive 64;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
limit_req_zone $binary_remote_addr zone=socket_limit:10m rate=50r/s;
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

# Cache for static assets
proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=static_cache:100m max_size=10g inactive=60m use_temp_path=off;

# ============================================================================
# HTTPS Server (Production)
# ============================================================================
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name lms.yourdomain.com;
    
    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/lms.yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/lms.yourdomain.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/lms.yourdomain.com/chain.pem;
    
    # SSL Security Settings (A+ Rating)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(self), microphone=(self), camera=(self)" always;
    
    # Logging
    access_log /var/log/nginx/sgt-lms-access.log;
    error_log /var/log/nginx/sgt-lms-error.log warn;
    
    # Max body size (for file uploads)
    client_max_body_size 50M;
    
    # Timeouts for long-lived connections (WebRTC/WebSocket)
    proxy_read_timeout 86400s;
    proxy_send_timeout 86400s;
    proxy_connect_timeout 60s;
    
    # ========================================================================
    # Socket.IO / WebSocket Connections
    # ========================================================================
    location /socket.io/ {
        # Rate limiting
        limit_req zone=socket_limit burst=20 nodelay;
        limit_conn conn_limit 50;
        
        proxy_pass http://backend_servers;
        proxy_http_version 1.1;
        
        # WebSocket upgrade headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Disable buffering for WebSocket
        proxy_buffering off;
        proxy_cache off;
        
        # Timeouts
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
    }
    
    # ========================================================================
    # API Endpoints
    # ========================================================================
    location /api/ {
        # Rate limiting
        limit_req zone=api_limit burst=50 nodelay;
        
        proxy_pass http://backend_servers;
        proxy_http_version 1.1;
        
        # Proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        
        # Keepalive
        proxy_set_header Connection "keep-alive";
        
        # Timeouts
        proxy_read_timeout 60s;
        proxy_send_timeout 60s;
        proxy_connect_timeout 10s;
    }
    
    # ========================================================================
    # Health Check Endpoint
    # ========================================================================
    location /health {
        proxy_pass http://backend_servers;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        access_log off;
    }
    
    # ========================================================================
    # Static Files (Frontend)
    # ========================================================================
    location / {
        root /var/www/sgt-lms/frontend/build;
        try_files $uri $uri/ /index.html;
        
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }
        
        # No cache for HTML
        location ~* \.html$ {
            expires -1;
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
        }
    }
    
    # ========================================================================
    # Uploaded Files
    # ========================================================================
    location /uploads/ {
        proxy_pass http://backend_servers;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        
        # Cache uploaded files
        expires 30d;
        add_header Cache-Control "public, immutable";
    }
    
    # ========================================================================
    # Block common exploit attempts
    # ========================================================================
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# ============================================================================
# HTTP to HTTPS Redirect
# ============================================================================
server {
    listen 80;
    listen [::]:80;
    server_name lms.yourdomain.com;
    
    # Redirect all HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

# ============================================================================
# Server Status (Internal Only - for monitoring)
# ============================================================================
server {
    listen 127.0.0.1:8080;
    server_name localhost;
    
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }
}
