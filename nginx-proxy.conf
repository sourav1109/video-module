# =============================================================================
# NGINX REVERSE PROXY FOR MULTI-DEVICE VIDEO CALL SYSTEM
# =============================================================================
# Purpose: Enable frontend-backend connectivity across multiple devices
# Features: WebSocket support, CORS, load balancing, SSL termination
# =============================================================================

# Upstream backend servers (add more for load balancing)
upstream backend_servers {
    # Enable sticky sessions based on client IP (required for WebSocket)
    ip_hash;
    
    # Backend server instances
    server localhost:5000 max_fails=3 fail_timeout=30s;
    # Add more servers for horizontal scaling:
    # server 192.168.1.101:5000 max_fails=3 fail_timeout=30s;
    # server 192.168.1.102:5000 max_fails=3 fail_timeout=30s;
    
    # Health check settings
    keepalive 64;
}

# Upstream frontend servers (React app)
upstream frontend_servers {
    server localhost:3000;
    # Add more for redundancy:
    # server 192.168.1.201:3000;
}

# Rate limiting zones (protect against DDoS)
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
limit_req_zone $binary_remote_addr zone=websocket_limit:10m rate=50r/s;

# HTTP Server (redirect to HTTPS in production)
server {
    listen 80;
    listen [::]:80;
    server_name localhost;
    
    # For production with SSL:
    # return 301 https://$server_name$request_uri;
    
    # Development: direct proxy
    location / {
        proxy_pass http://frontend_servers;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Backend API routes
    location /api/ {
        # Rate limiting
        limit_req zone=api_limit burst=20 nodelay;
        
        proxy_pass http://backend_servers;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts for long-running requests
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
    }
    
    # Socket.IO WebSocket connections
    location /socket.io/ {
        # Rate limiting for WebSocket
        limit_req zone=websocket_limit burst=10 nodelay;
        
        proxy_pass http://backend_servers;
        proxy_http_version 1.1;
        
        # WebSocket upgrade headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket timeout settings (keep connection alive)
        proxy_connect_timeout 7200s;
        proxy_send_timeout 7200s;
        proxy_read_timeout 7200s;
        
        # Disable buffering for WebSocket
        proxy_buffering off;
    }
}

# HTTPS Server (for production)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name localhost;
    
    # SSL certificates (update paths for production)
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    
    # SSL configuration (Mozilla modern profile)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=63072000" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # CORS headers for multi-device access
    add_header Access-Control-Allow-Origin $http_origin always;
    add_header Access-Control-Allow-Credentials true always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
    
    # Handle preflight requests
    if ($request_method = 'OPTIONS') {
        return 204;
    }
    
    # Frontend (React app)
    location / {
        proxy_pass http://frontend_servers;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Backend API
    location /api/ {
        limit_req zone=api_limit burst=20 nodelay;
        
        proxy_pass http://backend_servers;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # Socket.IO WebSocket
    location /socket.io/ {
        limit_req zone=websocket_limit burst=10 nodelay;
        
        proxy_pass http://backend_servers;
        proxy_http_version 1.1;
        
        # WebSocket upgrade
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Keep WebSocket connections alive
        proxy_connect_timeout 7200s;
        proxy_send_timeout 7200s;
        proxy_read_timeout 7200s;
        proxy_buffering off;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}

# =============================================================================
# DEPLOYMENT INSTRUCTIONS
# =============================================================================
#
# 1. Install nginx:
#    Ubuntu/Debian: sudo apt install nginx
#    CentOS/RHEL: sudo yum install nginx
#    Windows: Download from https://nginx.org/en/download.html
#
# 2. Copy this file:
#    Linux: sudo cp nginx-proxy.conf /etc/nginx/conf.d/videocall-proxy.conf
#    Windows: Copy to nginx/conf/nginx.conf (or include in main config)
#
# 3. Generate SSL certificates (for production):
#    sudo certbot --nginx -d yourdomain.com
#    Or use Let's Encrypt, AWS Certificate Manager, etc.
#
# 4. Test configuration:
#    sudo nginx -t
#
# 5. Reload nginx:
#    sudo systemctl reload nginx  (Linux)
#    nginx.exe -s reload  (Windows)
#
# 6. Enable firewall rules:
#    sudo ufw allow 80/tcp
#    sudo ufw allow 443/tcp
#
# =============================================================================
# MULTI-DEVICE ACCESS
# =============================================================================
#
# After setup, devices can connect via:
#
# Local network:
#   - Desktop: http://192.168.1.100
#   - Mobile: http://192.168.1.100
#   - Tablet: http://192.168.1.100
#   (Replace with your server's local IP)
#
# Production (with domain):
#   - All devices: https://yourdomain.com
#
# =============================================================================
